function Clean-ArchLogs {
<#
.SYNOPSIS
    Cleans and archives files based on specified parameters.

.DESCRIPTION
    The Clean-ArchLogs function is designed to clean and archive files based on several parameters. 
    It can search for files in a specified base directory (`BaseDir`) matching a specified base name (`BaseName`), 
    filter files based on the last write time of the previous month (`PrevMonth`), and archive them if required. 
    Archived files are compressed into a zip file and stored in the specified archive directory (`ArchDir`). 
    Additionally, the function can remove archived files older than a specified retention period (`Retention`).

.PARAMETER Archive
    Switch parameter indicating whether to archive files.

.PARAMETER ArchDir
    Directory where archived files will be stored.

.PARAMETER Retention
    Number of months to retain archived files. Default is 6 months.

.PARAMETER BaseDir
    Base directory where files to be cleaned/archived are located.

.PARAMETER BaseName
    Base name of files to be processed.

.PARAMETER PrevMonth
    Number of months ago to consider for file cleanup/archiving. Default is 1 month.

.PARAMETER Dest
    Array of email recipients for error notifications.

.EXAMPLE
    Clean-ArchLogs -Archive -BaseDir "C:\Logs" -BaseName "Log" -ArchDir "C:\ArchivedLogs" -Retention 12 -PrevMonth 2

    Description:
    Archives and cleans files with the base name "Log" in the "C:\Logs" directory. 
    Archives older than 12 months are removed, and files from 2 months ago are processed.

.NOTES
    Author: [Your Name]
    Date: [Date]
#>

    [CmdletBinding()]
    param (
        [switch]$Archive,      # Switch parameter to indicate whether to archive files
        [string]$ArchDir,      # Directory where archived files will be stored
        [int]$Retention = 6,   # Number of months to retain archived files (default is 6 months)
        [Parameter(Mandatory)]
        [string]$BaseDir,      # Base directory where files to be cleaned/archived are located
        [string]$BaseName,     # Base name of files to be processed
        [int]$PrevMonth = 1,   # Number of months ago to consider for file cleanup/archiving (default is 1 month)
        [string[]]$Dest        # Array of email recipients for error notifications
    )

    try {
        # Check if the base directory exists
        if (-not (Test-Path $BaseDir -PathType Container)) {
            throw "Base directory '$BaseDir' does not exist."
        }

        # Get the hostname of the server for email notifications
        $server = [System.Net.Dns]::GetHostName()

        # Set email parameters
        $To = if ($Dest) { $Dest } else { "Jhon.Doe@company.com" }
        $From = "$server@company.com"
        $SmtpServer = "smtp.carcgl.com"
        $Subject = "File purge Script Error"

        # Calculate the date for the previous month
        $PreviousMonthDate = (Get-Date).AddMonths(-$PrevMonth)

        # Get files from the base directory matching the specified criteria
        $FilesList = Get-ChildItem -Path $BaseDir -Filter "$BaseName*" -File |
                     Where-Object { $_.LastWriteTime.Month -eq $PreviousMonthDate.Month -and
                                     $_.LastWriteTime.Year -eq $PreviousMonthDate.Year }

        # Proceed if files matching the criteria are found
        if ($FilesList.Count -gt 0) {
            # Archive files if specified and archive directory is provided
            if ($Archive -and $ArchDir) {
                # Create archive directory if it does not exist
                if (-not (Test-Path $ArchDir -PathType Container)) {
                    New-Item -ItemType Directory -Path $ArchDir | Out-Null
                }

                # Create archive file name
                $ArchiveFileName = "{0}\{1}{2:yyyyMM}.zip" -f $ArchDir, $BaseName, $PreviousMonthDate

                # Compress files into a zip archive
                Compress-Archive -Path $FilesList.FullName -DestinationPath $ArchiveFileName -ErrorAction Stop

                # Remove archives older than $Retention months in archive
                $PurgeDate = (Get-Date).AddMonths(-$Retention)
                Get-ChildItem -Path $ArchDir -Filter "$BaseName*.zip" -File |
                    Where-Object { $_.CreationTime -lt $PurgeDate } | Remove-Item -Force -ErrorAction SilentlyContinue
            }

            # Remove Files
            $FilesList | Remove-Item -Force -ErrorAction SilentlyContinue
        }
    }
    catch {
        # Handle errors and send email notification
        Write-Host "Cleaning process Error: $_"
        $ErrorMessage = "There was an error with the script : $_"
        $ErrorMessage += "`nParams :"
        $ErrorMessage += "`n- BaseDir: $BaseDir"
        $ErrorMessage += "`n- Retention : $Retention"
        $ErrorMessage += "`n- PrevMonth : $PrevMonth"
        $ErrorMessage += "`n- Archive : $Archive"
        $ErrorMessage += "`n- Archive Dir : $ArchDir"
        $ErrorMessage += "`nScript path : $PSCommandPath"
        $ErrorMessage += "`nScript Server : $server"

        $FailMailParams = @{
            To = $To
            From = $From
            SmtpServer = $SmtpServer
            Subject = $Subject
            Priority = "High"
            Body = $ErrorMessage
        }

        Send-MailMessage @FailMailParams

        exit 1
    }
}
