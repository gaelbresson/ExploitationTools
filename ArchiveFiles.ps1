#---- Powershell script
#---- 

function Clean-ArchLogs {
<#
.SYNOPSIS
    Create archive BaseNameYYYYMM.zip in ArchDir with files from x previous month in Basedir
    Remove previously archived files
    Clean files in Archdir for archive files older thant $Retention month
    
.DESCRIPTION
    Create archive BaseNameYYYYMM.zip in $ArchDir with files from x previous month in Basedir
    Remove previously archived files
    Clean files in Archdir for archive files older thant $Retention month

.PARAMETER BaseDir
	Base directory

.PARAMETER BaseName
	File base name to be archived
	Also used as <Basename>YYYYMM.zip for archive

.PARAMETER Archive
	Set if archive are required. False if ommited

.PARAMETER ArchDir
	Archive directory
	
.PARAMETER PrevMonth
	Previous month (positive value)
	1 = one month before, 2 = two month before...
	Only an entire month and not all previous months

.PARAMETER Retention
	Remove archive older than retention in month
	Six month old by default if omited

.EXAMPLE
     Clean-ArchLogs -Archive -BaseDir E:\Temp\sap\data\int_in\ -BaseName I621_3D_ORDERS_ -ArchDir \Archives -PrevMonth 1 -Retention 6

.NOTES
    Author			Date		Rev			Comments  
    R. Dezon		20240220	1			Initial version
    G. BRESSON		20240306	1			Improved error handeling and added email sending
    
#>

param (
	[switch]$Archive,
	[string]$ArchDir,
	[int]$Retention,
	[Parameter(Mandatory)] [string]$BaseDir, 
    [string]$BaseName,  
    [int]$PrevMonth
)

    #Get current execution path 
    $mypath = $PSScriptRoot
    $server = [System.Net.Dns]::GetHostName();
    
    #define default email sending parameters
    [string[]] $To = "Jhon.DOE@company.com","Jane.DOE@company.com"
    $From = "$server@company.com"
    $SmtpServer = "smtp.company.com"
    $Subject = "File purge Script Error"

    try {
        if (!$PrevMonth) { $PrevMonth = 1 }
	    $PreviousMonthDate=(Get-Date).AddMonths(-$PrevMonth)
    #---- Select Files from previous xth month
        
        if(!(Test-Path $BaseDir)){
            throw [Exception]::new("Error missing base directory for cleaning and archiving")
        }

	    $FilesList = Get-ChildItem -Path ($BaseDir + "\*") -Include ($BaseName + "*") | Where-Object { $_.lastwritetime.month -eq $PreviousMonthDate.month -AND $_.lastwritetime.year -eq $PreviousMonthDate.year }
	    if ($FilesList) {
		    if ($Archive) {
                if (!(Test-Path -Path $Archdir)) {
                    New-Item -ItemType Directory -Path $Archdir
                }
                if (!$Retention) { $Retention = 6 }
                try{
			        #---- Compress files
                    Compress-Archive -Path $FilesList -DestinationPath ($ArchDir + "\" + $BaseName + $PreviousMonthDate.ToString("yyyy") + $PreviousMonthDate.ToString("MM") + ".zip") -ErrorAction Stop
                }catch{
                    throw [Exception]::new("Error during archiving file")
                }
                    #---- Remove archives older than $Retention months in archive
                    $PurgeDate = (Get-Date).AddMonths(-$Retention)
                try{
                    Get-ChildItem -Path ($ArchDir + "\*") -File -Include ($BaseName + "*.zip") | Where-Object { $_.CreationTime -lt $PurgeDate } | Remove-Item â€“Force
                }catch{
                    throw [Exception]::new("Error during deleting file")
                }
		    }
    #---- Removes Files                         
		    Remove-Item $FilesList -Force
	    }
    }
    #---- Exit the script in case of error to prevent deleting the file without archiving them
    catch [CustomException]{
        Write-Host "Cleaning process Error: $($_.Exception.Message)"
        #Send email in case of error : 
        $FailMailParams = @{
            To = $To
            From = $From
            SmtpServer = $SmtpServer
            Subject = $Subject
            Priority = "High"
            Body = "There was an error with the script : $($_.Exception.Message)
            Params :
            - BaseDir: $BaseDir
            - Retention : $Retention
            - Retention Month: $RetentionMonth
            - Archive : $Archive
            - Archive Dir : $ArchDir
            
            Script path : $PSCommandPath
            Script Server : $server"
        } 

        Send-MailMessage @FailMailParams

        exit 1
    }
    catch {
        Write-Host "Cleaning process Error: $($_.Exception.Message)"
        #Send email in case of error : 
        $FailMailParams = @{
            To = $To
            From = $From
            SmtpServer = $SmtpServer
            Subject = $Subject
            Priority = "High"
            Body = "There was an unknown error with the script : $($_.Exception.Message)
            Params :
            - BaseDir: $BaseDir
            - Retention : $Retention
            - Retention Month: $RetentionMonth
            - Archive : $Archive
            - Archive Dir : $ArchDir
            
            Script path : $PSCommandPath
            Script Server : $server"
        } 

        Send-MailMessage @FailMailParams

        exit 2
    }
}
#---------------------------------
#---- Dirs No terminal backslash
$OlderthanMonth = 1
$RetentionMonth = 6
#----
