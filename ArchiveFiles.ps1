<#
.SYNOPSIS
This PowerShell script is designed to manage files in a specified directory. It checks for files older than a specified number of days and performs actions based on the provided parameters.

.DESCRIPTION
The script performs the following actions:
1. Checks files in a directory older than a specified number of days.
2. Archives or deletes files based on the provided parameters.
3. Checks archive files older than another specified number of days and deletes them.
4. Logs all actions to a log file, retaining only the last 10 MB of logs.

.PARAMETER DirectoryPath
The path of the directory to be managed.

.PARAMETER RetentionDays
The number of days to retain files in the directory before considering them for archival or deletion.

.PARAMETER ArchiveFiles
Specifies whether files should be archived. If set to $true, files will be archived; otherwise, files will be deleted.

.PARAMETER ArchiveDirectory
The directory where archived files will be moved.

.PARAMETER ArchiveRetentionDays
The number of days to retain archive files before considering them for deletion.

.EXAMPLE
.\ManageFiles.ps1 -DirectoryPath "C:\YourDirectory" -RetentionDays 30 -ArchiveFiles $true -ArchiveDirectory "C:\ArchiveDirectory" -ArchiveRetentionDays 180

This command checks files in C:\YourDirectory older than 30 days. It archives them to C:\ArchiveDirectory and deletes files older than 180 days in C:\ArchiveDirectory.

.NOTES
Author: Gael BRESSON
Date: 21/02/2024
Version: 1.0
#>

param (
    [string]$DirectoryPath,
    [int]$RetentionDays,
    [bool]$ArchiveFiles,
    [string]$ArchiveDirectory,
    [int]$ArchiveRetentionDays
    [string]$logFilePath,
)

# Function to write log
function Write-Log {
    param (
        [string]$Message
    )
    Add-content -Path $logFilePath -Value "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - $Message"
}

# Check if log file exists, if not, create it
if (-not (Test-Path -Path $logFilePath)) {
    New-Item -ItemType File -Path $logFilePath | Out-Null
}

# Function to delete old log entries if log file exceeds 10 MB
function Clean-UpLog {
    $logSize = (Get-Item $logFilePath).length / 1MB
    if ($logSize -gt 10) {
        $content = Get-Content -Path $logFilePath -Raw
        $content | Select-Object -Last 1000 | Set-Content -Path $logFilePath
    }
}

# Clean up old log entries if needed
Clean-UpLog

# Check if the directory exists
if (-not (Test-Path -Path $DirectoryPath)) {
    Write-Log "Directory $DirectoryPath not found."
    exit
}

# Get current date
$currentDate = Get-Date

# Get files older than specified retention days
$oldFiles = Get-ChildItem -Path $DirectoryPath | Where-Object { $_.LastWriteTime -lt ($currentDate.AddDays(-$RetentionDays)) }

# Perform actions based on parameter values
foreach ($file in $oldFiles) {
    if ($ArchiveFiles) {
        # Compress file and move to archive directory
        $archiveFileName = "$ArchiveDirectory\$(Get-Date -Format 'yyyyMMdd_HHmmss')_$($file.Name).zip"
        Compress-Archive -Path $file.FullName -DestinationPath $archiveFileName
        Write-Log "File $($file.FullName) archived to $archiveFileName"
    } else {
        # Delete file
        Remove-Item -Path $file.FullName -Force
        Write-Log "File $($file.FullName) deleted"
    }
}

# Delete old archive files
if ($ArchiveFiles -and (Test-Path -Path $ArchiveDirectory)) {
    $oldArchives = Get-ChildItem -Path $ArchiveDirectory | Where-Object { $_.LastWriteTime -lt ($currentDate.AddDays(-$ArchiveRetentionDays)) }
    foreach ($archive in $oldArchives) {
        Remove-Item -Path $archive.FullName -Force
        Write-Log "Old archive $($archive.FullName) deleted"
    }
}
